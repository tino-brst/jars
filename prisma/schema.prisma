generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Jar {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  currency            Currency
  balance             Int                   @default(0) // TODO remove this field once its part of the materialized view, the initial value can be an initial received transaction
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  SentTransaction     SentTransaction[]
  ReceivedTransaction ReceivedTransaction[]
}

enum Currency {
  USD
  ARS
  EUR
}

model Transaction {
  id                  String               @id @default(uuid()) @db.Uuid
  type                TransactionType
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  sentTransaction     SentTransaction?
  receivedTransaction ReceivedTransaction?
  moveTransaction     MoveTransaction?
}

enum TransactionType {
  SENT
  RECEIVED
}

model SentTransaction {
  transactionId String      @id @unique @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id]) // TODO cascade delete & update
  jarId         String      @db.Uuid
  jar           Jar         @relation(fields: [jarId], references: [id])
  amount        Int         @default(0) // TODO add db level checks for negative values
  counterparty  String
}

model ReceivedTransaction {
  transactionId String      @id @unique @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id]) // TODO cascade delete & update
  jarId         String      @db.Uuid
  jar           Jar         @relation(fields: [jarId], references: [id])
  amount        Int         @default(0) // TODO add db level checks for positive values
  counterparty  String
}

// TODO jar @relations
model MoveTransaction {
  transactionId String      @id @unique @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id]) // TODO cascade delete & update
  fromJarId     String      @db.Uuid
  fromAmount    Int         @default(0) // TODO add db level checks for negative values
  toJarId       String      @db.Uuid
  toAmount      Int         @default(0) // TODO add db level checks for positive values
  // TODO add conversion rate and diff fields to account for fees
}

view JarBalanceUpdate {
  transactionId String @db.Uuid
  jarId         String @db.Uuid
  amount        Int

  @@unique([transactionId, jarId])
}
